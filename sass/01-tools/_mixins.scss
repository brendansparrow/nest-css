// Sass mixins
//
// Style guide: Sass.mixins


// font-size($size, $base, $unit)
//
// Implement a pixel fallback for proportional em or rem units
//
// $size - your desired font size in pixels
// $base - your base font size, defaults to 16
// $units - the units to use, defaults to rem
//
// Compatibility in IE9+, Firefox, Chrome, Safari, Edge, Samsung
//
// Styleguide Sass.mixins.font-size

@mixin font-size($size, $base: 16, $unit: "rem") {
  font-size: $size; // fallback for old browsers
  font-size: ($size / $base) * 1#{$unit};
}


// opacity($opacity)
//
// Applies opacity to an element
//
// Compatibility in IE8+, Firefox, Chrome, Safari, Edge, Opera, Samsung
//
// Sass.mixins.opacity

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity = $opacity-ie); // works in IE8
}


// spread($gap)
//
// Spread like butter on toast
// 
// Apply this mixin to a child element to make it fill its parent container
//
// $gap - optional margin around the child element
//
// Compatibility in IE8+, Firefox, Chrome, Safari, Edge, Opera, Samsung
//
// Styleguide Sass.mixins.positioning

@mixin spread($gap) {
  position: absolute;
  top: 0; bottom: 0;
  left: 0; right: 0;
}



// position($position, $args)
//
// This advanced mixin caters for fixed, relative and absolute positioning
// It also allows for control of each individual direction with multiple arguments
//
// $position - the position property
//
// $args - additional arguments for directional control
//
// Compatibility in IE8+, Firefox, Chrome, Safari, Edge, Opera, Samsung
// 
// Styleguide Sass.mixins.positioning

@mixin position($position, $args) {
  @each $dir in top right bottom left {
    $i: index($args, $dir);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
      #{$dir}: nth($args, $i + 1);
    }
  }
  position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
  @include position(absolute, $args);
}

@mixin fixed($args: '') {
  @include position(fixed, $args);
}

@mixin relative($args: '') {
  @include position(relative, $args);
}


// breakpoint($name)
// 
// Use this mixin to apply a responsive breakpoint from our named media queries
//
// Named media queries: http://css-tricks.com/naming-media-queries/
//
// $phone - max-width: 767px
//
// $tablet - min-width: 768px
//
// $laptop - min-width: 992px
//
// $desktop - min-width: 1280px
//
// $widescreen - min-width: 1980px
//
// Compatibility in IE9+, Firefox, Chrome, Safari, Edge
//
// Styleguide Sass.mixins.breakpoints

$breakpoints: (
  'phone':   ( max-width:  767px ),
  'tablet':  ( min-width:  768px ),
  'laptop': ( min-width:  992px ),
  'desktop':  ( min-width: 1280px ),
  'widescreen': ( min-width:  1980px )
);

@mixin breakpoint($name) {
      @if map-has-key($breakpoints, $name) {
        @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }
  @else {
    @warn "Couldn't find a breakpoint named `#{$name}`.";
  }
}


// retina($image, $width, $height)
//
// Include a retina image on retina-friendly devices only
//
// $image - the alternate url to use for retina
//
// $width - the width of the image to output
//
// $height - the height of the image to output
//
// Styleguide Sass.mixins.retina

@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
}